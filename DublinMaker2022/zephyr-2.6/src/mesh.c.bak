#include <zephyr.h>
#include <sys/printk.h>

#include <settings/settings.h>

#include <bluetooth/bluetooth.h>
#include <bluetooth/mesh.h>
#include <bluetooth/hci.h>
#include <bluetooth/conn.h>
#include <bluetooth/uuid.h>
#include <bluetooth/gatt.h>
/********************/



#define GROUP_ADDR 0xc000
#define NODE_ADDR 1
#define PUBLISHER_ADDR 0x000f
#define MOD_LF 0x0000
#define OP_VENDOR_BUTTON BT_MESH_MODEL_OP_3(0x00, BT_COMP_ID_LF)

static const uint16_t net_idx;
static const uint16_t app_idx;
static const uint32_t iv_index;
static uint8_t flags;
static uint16_t addr = NODE_ADDR;

static const uint8_t net_key[16] = {
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
};
static const uint8_t dev_key[16] = {
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
};
static const uint8_t app_key[16] = {
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
};
static const uint8_t dev_uuid[16] = { 0xdd, 0xdd };

static const struct bt_mesh_prov prov = {
        .uuid = dev_uuid,
};


static void heartbeat(const struct bt_mesh_hb_sub *sub, uint8_t hops,
                      uint16_t feat)
{
       printk("Got a heartbeat");
}
BT_MESH_HB_CB_DEFINE(hb_cb) = {
        .recv = heartbeat,
};

static struct bt_mesh_cfg_cli cfg_cli = {
};

static void attention_on(struct bt_mesh_model *model)
{
        printk("attention_on()\n");
}

static void attention_off(struct bt_mesh_model *model)
{
        printk("attention_off()\n");        
}

static const struct bt_mesh_health_srv_cb health_srv_cb = {
        .attn_on = attention_on,
        .attn_off = attention_off,
};

static struct bt_mesh_health_srv health_srv = {
        .cb = &health_srv_cb,
};

BT_MESH_HEALTH_PUB_DEFINE(health_pub, 0);

static struct bt_mesh_model root_models[] = {
        BT_MESH_MODEL_CFG_SRV,
        BT_MESH_MODEL_CFG_CLI(&cfg_cli),
        BT_MESH_MODEL_HEALTH_SRV(&health_srv, &health_pub),
};

static int vnd_button_pressed(struct bt_mesh_model *model,
                               struct bt_mesh_msg_ctx *ctx,
                               struct net_buf_simple *buf)
{
        printk("src 0x%04x\n", ctx->addr);
        
        return 0;
}

static const struct bt_mesh_model_op vnd_ops[] = {
        { OP_VENDOR_BUTTON, BT_MESH_LEN_EXACT(0), vnd_button_pressed },
        BT_MESH_MODEL_OP_END,
};

static struct bt_mesh_model vnd_models[] = {
        BT_MESH_MODEL_VND(BT_COMP_ID_LF, MOD_LF, vnd_ops, NULL, NULL),
};

static struct bt_mesh_elem elements[] = {
        BT_MESH_ELEM(0, root_models, vnd_models),
};

static const struct bt_mesh_comp comp = {
        .cid = BT_COMP_ID_LF,
        .elem = elements,
        .elem_count = ARRAY_SIZE(elements),
};
static void configure(void)
{
        printk("Configuring...\n");

        /* Add Application Key */
        bt_mesh_cfg_app_key_add(net_idx, addr, net_idx, app_idx, app_key, NULL);

        /* Bind to vendor model */
        bt_mesh_cfg_mod_app_bind_vnd(net_idx, addr, addr, app_idx,
                                     MOD_LF, BT_COMP_ID_LF, NULL);

        /* Bind to Health model */
        bt_mesh_cfg_mod_app_bind(net_idx, addr, addr, app_idx,
                                 BT_MESH_MODEL_ID_HEALTH_SRV, NULL);

        /* Add model subscription */
        bt_mesh_cfg_mod_sub_add_vnd(net_idx, addr, addr, GROUP_ADDR,
                                    MOD_LF, BT_COMP_ID_LF, NULL);

        printk("Configuration complete\n");

}
static void bt_ready(int err)
{
	if (err) {
		printk("Bluetooth init failed (err %d)\n", err);
		return;
	}
	printk("Bluetooth initialized\n");
	err = bt_mesh_init(&prov, &comp);
	if (err) {
			printk("Initializing mesh failed (err %d)\n", err);
			return;
	}

	printk("Mesh initialized\n");



	err = bt_mesh_provision(net_key, net_idx, flags, iv_index, addr,
							dev_key);
	if (err == -EALREADY) {
			printk("Using stored settings\n");
	} else if (err) {
			printk("Provisioning failed (err %d)\n", err);
			return;
	} else {
			printk("Provisioning completed\n");
			configure();
	}
	struct bt_mesh_cfg_hb_sub sub = {
                        .src = PUBLISHER_ADDR,
                        .dst = GROUP_ADDR,
                        .period = 0x10,
                };

                bt_mesh_cfg_hb_sub_set(net_idx, addr, &sub, NULL);
                printk("Subscribing to heartbeat messages\n");

}
void mesh_begin()
{
	int ret = bt_enable(bt_ready);
}

/********************/
